# 📦 Tech Challenge Fase 4 – Microfrontend Architecture

Este projeto adota uma arquitetura moderna baseada em **microfrontends**, dividida em:

* 🖥️ `host`: aplicação principal que orquestra os módulos remotos
* 📊 `dashboard`: microfrontend secundário responsável por transações
* 🌐 `shared`: recursos compartilhados entre os frontends
* ⚙️ `backend`: API Node.js e base de dados MongoDB

---

## 🗂️ Estrutura Geral

```
├── backend
├── frontend
│   ├── dashboard
│   ├── host
│   └── shared
├── docker-compose.yml
```

### 📁 `frontend/host`

* Gerencia autenticação e navegação principal
* Compartilha componentes comuns via Module Federation (botões, inputs, modais, etc.)

### 📁 `frontend/dashboard`

* Exibe histórico de transações com scroll infinito
* Permite editar e remover registros
* Usa `usecases` para manter regras de negócio isoladas

### 📁 `frontend/shared`

* Interfaces (`User`, `Transaction`)
* Imagens e estilos globais (Tailwind)
* Utilitários comuns (`fetch-api`, `formatters`, etc.)

### 📁 `backend`

* API REST com endpoints para autenticação, conta e extrato
* Banco MongoDB via Docker

---

## 🔌 Integração via Module Federation

* Host importa componentes de `dashboard`
* `dashboard` depende de módulos do `host` (botões, inputs, etc.)

```ts
remotes: {
  dashboard: 'http://localhost:3002/assets/remoteEntry.js',
}
```

```ts
exposes: {
  './Button': './src/components/UI/buttons/button/Button.tsx',
  './Input': './src/components/UI/inputs/input/index.tsx',
  './Modal': './src/components/UI/modal/index.tsx',
  ...
}
```

---

## 🚀 Execução do Projeto

### 🔁 Opção 1: Docker Compose (recomendado)

```bash
docker-compose up -d --build
```

### 🔧 Opção 2: Manual

**Backend:**

```bash
cd backend
npm install
npm run dev
```

**Host:**

```bash
cd frontend/host
npm install
npm run dev
```

**Dashboard:**

```bash
cd frontend/dashboard
npm install
npm run dev
```

---

## 🧠 Arquitetura Clean (Fase 4)

Cada microfrontend segue a estrutura:

```
src/
├── domain/         # Interfaces e entidades
├── infrastructure/ # APIs, armazenamento local
├── presentation/   # Componentes React e páginas
├── usecases/       # Regras de negócio isoladas
├── utils/          # Funções auxiliares (format, parse...)
```

---

## 📚 Principais melhorias aplicadas

* ✅ Separação em `usecases` para lógica de negócio (`updateTransaction`, `deleteTransaction`)
* ✅ `UserStorageService` para persistência de sessão
* ✅ `usePagination` e `useSearchFilter` para reatividade e performance
* ✅ `getAuthenticatedUser()` garante segurança mínima no frontend
* ✅ Suporte a Module Federation com Vite e React 18

---

## 📦 Tecnologias principais

* React 18 + Vite 6 + TailwindCSS
* Module Federation com `@originjs/vite-plugin-federation`
* Docker + Docker Compose
* Node.js + MongoDB
* TypeScript + ESLint

---

> Projeto desenvolvido como parte da **Fase 4 do Tech Challenge POSTECH** 🚀
